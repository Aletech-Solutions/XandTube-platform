{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000\n});\n\n// Interceptor para adicionar token automaticamente\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Interceptor para logging de erros e autenticação\napi.interceptors.response.use(response => response, error => {\n  var _error$response, _error$response2;\n  console.error('Erro na API:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n\n  // Se erro 401, redireciona para login\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    if (window.location.pathname !== '/login') {\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Videos API\nexport const videosAPI = {\n  getAll: (params = {}) => api.get('/videos', {\n    params\n  }),\n  getById: id => api.get(`/videos/${id}`),\n  upload: formData => api.post('/videos', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  }),\n  like: id => api.put(`/videos/${id}/like`),\n  dislike: id => api.put(`/videos/${id}/dislike`),\n  delete: id => api.delete(`/videos/${id}`)\n};\n\n// Channels API\nexport const channelsAPI = {\n  getAll: (params = {}) => api.get('/channels', {\n    params\n  }),\n  getById: id => api.get(`/channels/${id}`),\n  create: data => api.post('/channels', data),\n  update: (id, data) => api.put(`/channels/${id}`, data),\n  subscribe: id => api.put(`/channels/${id}/subscribe`),\n  unsubscribe: id => api.put(`/channels/${id}/unsubscribe`),\n  delete: id => api.delete(`/channels/${id}`)\n};\n\n// Comments API\nexport const commentsAPI = {\n  getByVideoId: (videoId, params = {}) => api.get(`/comments/${videoId}`, {\n    params\n  }),\n  create: data => api.post('/comments', data),\n  like: id => api.put(`/comments/${id}/like`),\n  dislike: id => api.put(`/comments/${id}/dislike`),\n  delete: id => api.delete(`/comments/${id}`)\n};\n\n// Auth API\nexport const authAPI = {\n  register: data => api.post('/auth/register', data),\n  login: data => api.post('/auth/login', data),\n  me: () => api.get('/auth/me'),\n  updateProfile: data => api.put('/auth/me', data),\n  changePassword: data => api.put('/auth/change-password', data),\n  logout: () => api.post('/auth/logout')\n};\n\n// Download API\nexport const downloadAPI = {\n  getInfo: url => api.get('/download/info', {\n    params: {\n      url\n    }\n  }),\n  getFormats: url => api.get('/download/formats', {\n    params: {\n      url\n    }\n  }),\n  downloadVideo: data => api.post('/download/video', data),\n  downloadPlaylist: data => api.post('/download/playlist', data),\n  getProgress: downloadId => api.get(`/download/progress/${downloadId}`),\n  cancelDownload: downloadId => api.delete(`/download/cancel/${downloadId}`),\n  getHistory: () => api.get('/download/history')\n};\n\n// Health check\nexport const healthCheck = () => api.get('/health');\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","_error$response","_error$response2","console","data","message","status","removeItem","window","location","pathname","href","videosAPI","getAll","params","get","getById","id","upload","formData","post","like","put","dislike","delete","channelsAPI","update","subscribe","unsubscribe","commentsAPI","getByVideoId","videoId","authAPI","register","login","me","updateProfile","changePassword","logout","downloadAPI","getInfo","url","getFormats","downloadVideo","downloadPlaylist","getProgress","downloadId","cancelDownload","getHistory","healthCheck"],"sources":["C:/Users/keyce/XandNet Project/XandTube/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000,\r\n});\r\n\r\n// Interceptor para adicionar token automaticamente\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Interceptor para logging de erros e autenticação\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    console.error('Erro na API:', error.response?.data || error.message);\r\n    \r\n    // Se erro 401, redireciona para login\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      if (window.location.pathname !== '/login') {\r\n        window.location.href = '/login';\r\n      }\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Videos API\r\nexport const videosAPI = {\r\n  getAll: (params = {}) => api.get('/videos', { params }),\r\n  getById: (id) => api.get(`/videos/${id}`),\r\n  upload: (formData) => api.post('/videos', formData, {\r\n    headers: { 'Content-Type': 'multipart/form-data' }\r\n  }),\r\n  like: (id) => api.put(`/videos/${id}/like`),\r\n  dislike: (id) => api.put(`/videos/${id}/dislike`),\r\n  delete: (id) => api.delete(`/videos/${id}`)\r\n};\r\n\r\n// Channels API\r\nexport const channelsAPI = {\r\n  getAll: (params = {}) => api.get('/channels', { params }),\r\n  getById: (id) => api.get(`/channels/${id}`),\r\n  create: (data) => api.post('/channels', data),\r\n  update: (id, data) => api.put(`/channels/${id}`, data),\r\n  subscribe: (id) => api.put(`/channels/${id}/subscribe`),\r\n  unsubscribe: (id) => api.put(`/channels/${id}/unsubscribe`),\r\n  delete: (id) => api.delete(`/channels/${id}`)\r\n};\r\n\r\n// Comments API\r\nexport const commentsAPI = {\r\n  getByVideoId: (videoId, params = {}) => api.get(`/comments/${videoId}`, { params }),\r\n  create: (data) => api.post('/comments', data),\r\n  like: (id) => api.put(`/comments/${id}/like`),\r\n  dislike: (id) => api.put(`/comments/${id}/dislike`),\r\n  delete: (id) => api.delete(`/comments/${id}`)\r\n};\r\n\r\n// Auth API\r\nexport const authAPI = {\r\n  register: (data) => api.post('/auth/register', data),\r\n  login: (data) => api.post('/auth/login', data),\r\n  me: () => api.get('/auth/me'),\r\n  updateProfile: (data) => api.put('/auth/me', data),\r\n  changePassword: (data) => api.put('/auth/change-password', data),\r\n  logout: () => api.post('/auth/logout')\r\n};\r\n\r\n// Download API\r\nexport const downloadAPI = {\r\n  getInfo: (url) => api.get('/download/info', { params: { url } }),\r\n  getFormats: (url) => api.get('/download/formats', { params: { url } }),\r\n  downloadVideo: (data) => api.post('/download/video', data),\r\n  downloadPlaylist: (data) => api.post('/download/playlist', data),\r\n  getProgress: (downloadId) => api.get(`/download/progress/${downloadId}`),\r\n  cancelDownload: (downloadId) => api.delete(`/download/cancel/${downloadId}`),\r\n  getHistory: () => api.get('/download/history')\r\n};\r\n\r\n// Health check\r\nexport const healthCheck = () => api.get('/health');\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}