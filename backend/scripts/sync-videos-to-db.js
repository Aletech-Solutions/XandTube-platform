#!/usr/bin/env node

/**
 * Script para sincronizar v√≠deos existentes com o banco de dados
 * Executa o mesmo processo que acontece na inicializa√ß√£o do servidor
 */

const downloadScanService = require('../services/downloadScanService');

async function syncVideosToDatabase() {
  console.log('üöÄ XandTube - Sincroniza√ß√£o de V√≠deos');
  console.log('üìã Este script sincroniza todos os v√≠deos da pasta downloads com o banco de dados');
  console.log('=' .repeat(70));
  
  const startTime = Date.now();
  
  try {
    // Executar sincroniza√ß√£o com op√ß√µes detalhadas
    const options = {
      skipExisting: true,    // Pular v√≠deos j√° existentes
      batchSize: 5,         // Processar 5 arquivos por vez
      logProgress: true     // Mostrar progresso detalhado
    };
    
    console.log('‚öôÔ∏è Configura√ß√µes:');
    console.log(`   ‚Ä¢ Pular existentes: ${options.skipExisting ? 'Sim' : 'N√£o'}`);
    console.log(`   ‚Ä¢ Tamanho do lote: ${options.batchSize}`);
    console.log(`   ‚Ä¢ Log detalhado: ${options.logProgress ? 'Sim' : 'N√£o'}\n`);
    
    const processedDownloads = await downloadScanService.scanAndRegisterDownloads(options);
    
    const totalTime = Date.now() - startTime;
    
    console.log('\n' + '='.repeat(70));
    console.log('üéâ Sincroniza√ß√£o conclu√≠da com sucesso!');
    console.log(`‚è±Ô∏è Tempo total: ${totalTime}ms`);
    console.log(`üìä V√≠deos processados: ${processedDownloads.length}`);
    
    if (processedDownloads.length > 0) {
      console.log('\nüìã √öltimos v√≠deos sincronizados:');
      processedDownloads.slice(-5).forEach((download, index) => {
        console.log(`   ${index + 1}. ${download.title}`);
        console.log(`      Canal: ${download.channelName}`);
        console.log(`      Tamanho: ${downloadScanService.formatBytes(download.fileSize || 0)}`);
      });
    }
    
    // Mostrar estat√≠sticas do banco
    try {
      const stats = await downloadScanService.getDownloadStats();
      console.log('\nüìà Estat√≠sticas do banco de dados:');
      console.log(`   ‚Ä¢ Total de downloads: ${stats.total}`);
      console.log(`   ‚Ä¢ Downloads completos: ${stats.completed}`);
      console.log(`   ‚Ä¢ Tamanho total: ${stats.totalSizeFormatted}`);
    } catch (statsError) {
      console.warn('‚ö†Ô∏è Erro ao obter estat√≠sticas:', statsError.message);
    }
    
    process.exit(0);
    
  } catch (error) {
    console.error('\nüí• Erro durante a sincroniza√ß√£o:', error.message);
    console.error('Stack trace:', error.stack);
    process.exit(1);
  }
}

// Mostrar ajuda se solicitado
if (process.argv.includes('--help') || process.argv.includes('-h')) {
  console.log(`
XandTube - Script de Sincroniza√ß√£o de V√≠deos

Este script escaneia a pasta videos/downloads e registra todos os v√≠deos
encontrados no banco de dados SQLite.

Uso:
  node sync-videos-to-db.js              Executar sincroniza√ß√£o
  node sync-videos-to-db.js --help       Mostrar esta ajuda

O que faz:
  1. Escaneia pasta videos/downloads
  2. Processa arquivos .info.json
  3. Registra v√≠deos no banco de dados
  4. Pula v√≠deos j√° existentes
  5. Cria usu√°rio padr√£o se necess√°rio
  6. Mostra estat√≠sticas detalhadas

Recursos de seguran√ßa:
  - N√£o sobrescreve dados existentes
  - Processamento em lotes para performance
  - Tratamento robusto de erros
  - Logs detalhados para debug
`);
  process.exit(0);
}

// Verificar se deve for√ßar re-sincroniza√ß√£o
const forceSync = process.argv.includes('--force');
if (forceSync) {
  console.log('‚ö†Ô∏è Modo FORCE ativado - ir√° reprocessar v√≠deos existentes');
}

syncVideosToDatabase();
